$btn-box-shadow:	4px 4px 4px #ccc !important;
$btn-box-shadow-active:	2px 2px 2px #ccc !important;
$enable-shadows: 	true !important;

@mixin button-variant($background, $border, $hover-background: darken($background, 7.5%), $hover-border: darken($border, 10%), $active-background: darken($background, 10%), $active-border: darken($border, 12.5%)) {
  color: color-yiq($background);
  @include gradient-bg($background);
  border-color: $border;
  border-width: 0;
  @include box-shadow($btn-box-shadow);
  position: relative;
  overflow: hidden;
  @include hover {
    color: color-yiq($hover-background);
    @include gradient-bg($hover-background);
    border-color: $hover-border;
  }

  &:focus,
  &.focus {
    // Avoid using mixin so we can pass custom focus shadow properly
    @if $enable-shadows {
      box-shadow: $btn-box-shadow-active;
    } @else {
      box-shadow: 0 0 0 $btn-focus-width rgba($border, .5);
    }
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    color: color-yiq($background);
    background-color: $background;
    border-color: $border;
    box-shadow: none !important;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: color-yiq($active-background);
    background-color: $active-background;
    @if $enable-gradients {
      background-image: none; // Remove the gradient for the pressed/active state
    }
    border-color: $active-border;

    &:focus {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows {
        box-shadow: $btn-box-shadow-active;
      } @else {
        box-shadow: 0 0 0 $btn-focus-width rgba($border, .5);
      }
    }
  }
}


.abbtn {
	@extend .btn;

	&:after {
	  content: '';
	  position: absolute;
	  top: 50%;
	  left: 50%;
	  width: 5px;
	  height: 5px;
	  background: rgba(50, 50, 50, .2);
	  opacity: 0;
	  border-radius: 100%;
	  transform: scale(1, 1) translate(-50%);
	  transform-origin: 50% 50%;
	}
}

@each $color, $value in $theme-colors {
  .abbtn-#{$color} {
    @include button-variant($value, $value);
  }
}

@each $background, $value in $theme-colors-gradient {
  .abbtn-#{$background} {
    color: #fff;
  background: $value !important;
  border-width: 0;
  @include box-shadow($btn-box-shadow);
  position: relative;
  overflow: hidden;
  @include hover {
    color: #fff;
    background: $value !important;
  }

  &:focus,
  &.focus {
    // Avoid using mixin so we can pass custom focus shadow properly
    @if $enable-shadows {
      box-shadow: $btn-box-shadow-active;
    } @else {
      box-shadow: 0 0 0 $btn-focus-width rgba($border, .5);
    }
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    color: #f2f2f2;
    background-color: $value;
    box-shadow: none !important;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: #f2f2f2;
    background-color: $value;
    @if $enable-gradients {
      background-image: none; // Remove the gradient for the pressed/active state
    }

    &:focus {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows {
        box-shadow: $btn-box-shadow-active;
      } @else {
        box-shadow: 0 0 0 $btn-focus-width rgba($border, .5);
      }
    }
  }
  }
}

@each $color, $value in $theme-colors {
  .abbtn-outline-#{$color} {
    @include button-outline-variant($value);
  }
}

.abbtn-flat,
.abbtn-flat:focus,
.abbtn-flat.focus {
	border-radius: 0;
	box-shadow: none !important;
}

@keyframes ripple {
  0% {
    transform: scale(0, 0);
    opacity: 1;
  }
  20% {
    transform: scale(25, 25);
    opacity: 1;
  }
  100% {
    opacity: 0;
    transform: scale(40, 40);
  }
}

.abbtn:focus:not(:active)::after {
  animation: ripple 1s ease-out;
}
